{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Nidavellir","text":""},{"location":"index.html#components","title":"Components","text":"<p>Components are any C++ type that satisfied the 'Component' concept. Which roughly means the component needs to be moveable and destructible. <pre><code>struct Point {\n    float x, y;\n};\n\nstruct Person {\n    int age;\n    std::string name;\n};\n\nstruct Polygon {\n    // is_relocatable is used to tell nidavellir that this\n    // component can be bitwise-copied when relocated.\n    // The stale copy will then be forgotten and the destructor will not be called.\n    using is_relocatable = void;\n    std::vector&lt;Point&gt; vertices;\n};\n</code></pre></p>"},{"location":"index.html#worlds","title":"Worlds","text":"<p>Worlds store entites and components and allows spawning entities, adding and removing components etc. <pre><code>#include \"nidavellir.h\"\n\nnid::World world;\n</code></pre></p>"},{"location":"index.html#entities","title":"Entities","text":"<p>Entities are unique ids used for storing components. <pre><code>#include \"nidavellir.h\"\n\nstruct Point {\n    float x, y;\n};\n\nstruct Person {\n    int age;\n    std::string name;\n};\n\nnid::World world;\nauto entity = world.spawn(\n    Point{.x = 10, .y = 10},\n    Person{.age = 123, .name = \"Odin\"}\n);\n\nauto&amp; [point, person] = world.get&lt;Point, Person&gt;(entity);\n</code></pre></p>"},{"location":"index.html#example","title":"Example","text":"<pre><code>#include \"nidavellir.h\"\n\nstruct Point {\n    float x, y;\n};\n\nstruct Person {\n    int age;\n    std::string name;\n};\n\nstruct Polygon {\n    // Tell nidavellir to use memcpy to move this component\n    using is_relocatable = void;\n    std::vector&lt;Point&gt; vertices;\n};\n\nstruct Hand {\n    int fingers{5};\n};\n\nint main() {\n    nid::World world;\n\n    // Spawn an entity with a Point, Person and Polygon component.\n    auto entity = world.spawn(\n        Point{.x = 10, .y = 10},\n        Person{.age = 2199, .name = \"Brock\"},\n        Polygon{.vertices = {Point{.x = 2, .y = 2}}}\n    );\n\n    // Add a double and a Hand component to the entity.\n    world.add(entity, double{3.2}, Hand{});\n\n    // Get single or multiple components.\n    auto&amp; polygon = world.get&lt;Polygon&gt;(entity);\n    auto&amp; [point, person] = world.get&lt;Point, Person&gt;(entity);\n\n    // Remove the Point, Hand and double components.\n    world.remove&lt;Point, Hand, double&gt;(entity);\n\n    // Destroy the entity and all its components.\n    world.despawn(entity);\n\n    return 0;\n}\n</code></pre>"},{"location":"docs_readme.html","title":"Nidavellir","text":"<p>Nidavellir is an entity component system written in C++.</p>"}]}